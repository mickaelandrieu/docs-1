{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nWhat is BackBee ?\n\n\nBackBee is an open source Content Management System (CMS) with one major advantage. BackBee uses On-page Editing Technology (OET) which means you can easily create and manage websites as they appear with no prior technical knowledge.\n\n\nWhat is an Open-page Editing Site?\n\n\nOn-page Editing Technology (OET) is the natural evolution of your usual Content Management System functionalities. On-page Editing Technology is a tool that allows you to enter, edit and manage your website directly as it appears to your users: The back office and front office are merged.\n\n\nWhat's this means?\n\n\nIn most content management systems, you have to shuttle between the back office \u2013 a functional interface \u2013 and a \u201cpreview\u201d mode. Only then can you\u00a0see how the page will be seen by your users.\n\n\nBackBee\u2019s On-Page Editing Technology lets you directly do all your inputting and editing on the page that appears to your users. Therefore you get an immediate and exact idea of what the final page will look like eliminating all unnecessary maneuvers.\n\n\nWhat\u2019s so interesting about this?\n\n\nIt's easier and more flexible than your usual CMS. With BackBee's On-page Editing Technology, you can work directly on your HTML page, the page that's visible to your users. You can drag and drop page elements and move them around as you wish, adding, deleting or changing text, photos or other page elements by simply clicking on the area in question.\n\n\nThe majority of the editorial functions require no back office. BackBee is the first CMS to use On-Page editing Technology merging back office and front office.\n\n\nKey concepts\n\n\n\n\nIt\u2019s unimaginably easy to use.\n\n\nResponsive design is native to the app.\n\n\nIt\u2019s super flexible in terms of graphic design, workflow, SEO and user access.\n\n\nIts secure, in several senses: it saves changes so editorial security is guaranteed; it's easy to configure user access and rights; and the BackBee core is very secure, so developers can make contributions fearlessly.\n\n\nIt\u2019s open source, which means it\u2019s constantly being tested and improved.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/#what-is-backbee", 
            "text": "BackBee is an open source Content Management System (CMS) with one major advantage. BackBee uses On-page Editing Technology (OET) which means you can easily create and manage websites as they appear with no prior technical knowledge.  What is an Open-page Editing Site?  On-page Editing Technology (OET) is the natural evolution of your usual Content Management System functionalities. On-page Editing Technology is a tool that allows you to enter, edit and manage your website directly as it appears to your users: The back office and front office are merged.  What's this means?  In most content management systems, you have to shuttle between the back office \u2013 a functional interface \u2013 and a \u201cpreview\u201d mode. Only then can you\u00a0see how the page will be seen by your users.  BackBee\u2019s On-Page Editing Technology lets you directly do all your inputting and editing on the page that appears to your users. Therefore you get an immediate and exact idea of what the final page will look like eliminating all unnecessary maneuvers.  What\u2019s so interesting about this?  It's easier and more flexible than your usual CMS. With BackBee's On-page Editing Technology, you can work directly on your HTML page, the page that's visible to your users. You can drag and drop page elements and move them around as you wish, adding, deleting or changing text, photos or other page elements by simply clicking on the area in question.  The majority of the editorial functions require no back office. BackBee is the first CMS to use On-Page editing Technology merging back office and front office.", 
            "title": "What is BackBee ?"
        }, 
        {
            "location": "/#key-concepts", 
            "text": "It\u2019s unimaginably easy to use.  Responsive design is native to the app.  It\u2019s super flexible in terms of graphic design, workflow, SEO and user access.  Its secure, in several senses: it saves changes so editorial security is guaranteed; it's easy to configure user access and rights; and the BackBee core is very secure, so developers can make contributions fearlessly.  It\u2019s open source, which means it\u2019s constantly being tested and improved.", 
            "title": "Key concepts"
        }, 
        {
            "location": "/developper-documentation/requirements/", 
            "text": "Developper documentation\n\n\nRequirements for running BackBee CMS\n\n\nTo run BackBee CMS, your system needs to adhere to a list of requirements.\n\n\nBelow is the list of required and optional requirements.\n\n\nRequired\n\n\nBecause BackBee CMS is built on top of Symfony components, theses requirements are required.\n\n\n\n\nJSON\n needs to be enabled\n\n\nctype\n needs to be enabled\n\n\nmbstring\n needs to be enabled\n\n\nYour php configuration needs to have the date.timezone setting completed\n\n\n\n\nMore, PHP needs to be a minimum version of \nPHP 5.4.0\n.\n\n\nOptional\n\n\n\n\nYou (may) need to have the PHP-XML module installed\n\n\nYou (may) need to have at least version 2.6.21 of libxml\n\n\nYou (may) need to have PHP tokenizer module enabled\n\n\nYou (may) need to have iconv module enabled\n\n\nYou (may) need to have POSIX enabled (only on *nix)\n\n\nYou (may) need to have Intl installed with ICU 4+\n\n\nYou (may) need to have APC 3.0.17+ installed (or another opcode cache needs to be installed)\n\n\nphp configuration recommended settings:\n\n\n\n\nshort_open_tag = Off\n\nmagic_quotes_gpc = Off\n\nregister_globals = Off\n\nsession.auto_start = Off\n\n\n\n\nDoctrine2 (Database management)\n\n\nBecause we depend on Doctrine 2, you will need to have PDO installed. Additionally, you need to have the PDO driver installed for the database server you want to use.\nAlso, you need \nphp5-sqlite\n extension to be installed and enabled during the installation process.", 
            "title": "Requirements"
        }, 
        {
            "location": "/developper-documentation/requirements/#developper-documentation", 
            "text": "", 
            "title": "Developper documentation"
        }, 
        {
            "location": "/developper-documentation/requirements/#requirements-for-running-backbee-cms", 
            "text": "To run BackBee CMS, your system needs to adhere to a list of requirements.  Below is the list of required and optional requirements.  Required  Because BackBee CMS is built on top of Symfony components, theses requirements are required.   JSON  needs to be enabled  ctype  needs to be enabled  mbstring  needs to be enabled  Your php configuration needs to have the date.timezone setting completed   More, PHP needs to be a minimum version of  PHP 5.4.0 .  Optional   You (may) need to have the PHP-XML module installed  You (may) need to have at least version 2.6.21 of libxml  You (may) need to have PHP tokenizer module enabled  You (may) need to have iconv module enabled  You (may) need to have POSIX enabled (only on *nix)  You (may) need to have Intl installed with ICU 4+  You (may) need to have APC 3.0.17+ installed (or another opcode cache needs to be installed)  php configuration recommended settings:   short_open_tag = Off\n\nmagic_quotes_gpc = Off\n\nregister_globals = Off\n\nsession.auto_start = Off  Doctrine2 (Database management)  Because we depend on Doctrine 2, you will need to have PDO installed. Additionally, you need to have the PDO driver installed for the database server you want to use.\nAlso, you need  php5-sqlite  extension to be installed and enabled during the installation process.", 
            "title": "Requirements for running BackBee CMS"
        }, 
        {
            "location": "/developper-documentation/installation/", 
            "text": "Developper documentation\n\n\nInstallation\n\n\nInstallation of BackBee in developper mode assume assume you have basic knowledge of PHP5, Apache or Nginx and MySQL.\n\n\nThird party Software\n\n\nFirst of all, you need to check that your computer has a friendly working environment for web development. At a minimum, you need a web server (Apache, for instance), a database engine (MySQL, PostgreSQL, SQLite, or any PDO-compatible database engine), and \nPHP 5.4\n or later.\n\n\nAt least, you need to install \ngit\n and \nComposer\n, the dependency manager for PHP.\n\n\nFollow this link to install it if your are on \nLinux/Unix based OS\n (like ubuntu or Mac OS X), Composer is also available on \nWindows system\n.\n\n\nIn a command line interface, check if \ncomposer\n is correctly installed:\n\n\n\n\nAlso, check your PHP version which should be 5.4 or greater.\n\n\n\n\nEventually, you need to set up a domain name in your operating system.\nOn Unix/Linux based OS, you can add it into \n/etc/hosts\n file, we will choose \nblogbee.dev\n:\n\n\n127.0.0.1   blogbee.dev\n\n\n\nOk ! We can now launch the installation process.\n\n\nWeb Installer\n\n\nOpen a command line interface and get BackBee:\n\n\n$ composer create-project \"backbee/backbee-standard\" /path/to/your/folder \"1.0\" -n\n\n\n\nThen on the \npublic\n directory, launch the builtin server of PHP:\n\n\n$ cd /path/to/your/folder/public \n php -S blogbee.dev:8000\n\n\n\nAnd you should see the first installation step of BackBee (access \nhttp://localhost:8000/install.php\n) in a web browser:\n\n\n\n\nYou need to create \ncache\n and \nlog\n folders with the correct rights, then you can refresh the page and access to the \nsecond step\n of the installer.\n\n\n\n\nIf required, check the \nrepository/Config\n folder rights and then proceed with the \nthird\n step.\n\n\nYou need to set your database settings. If you use a different database engine than MySQL or MariaDB, set the correct driver else you have nothing to change, only fill the fields \ndatabase name\n, \nusername\n and \npassword\n.\n\n\n\n\nYou also need to define your super admin user, fill the credentials then save and continue to the \nfourth\n step.\n\n\n\n\nBackBee Installer creates and populates the database, fill the last information to complete the installation process: the \nsite_name\n and the \ndomain\n.\n\n\n\n\nYou are done: BackBee gives you the \nApache\n or \nNginx\n configuration you have to set to be able to use BackBee on the chosen domain.\n\n\n\n\n\n\nWhen you have set your web server, access the site by going to \nhttp://blogbee.dev\n.\n\n\nIf everything is correctly installed, you should see the BackBee welcome message:\n\n\n\n\n\n\nIf you can't see BackBee welcome message, check both \ncache\n and \nlog\n folders have the correct rights.\n\n\n\n\nYou can even connect to the \"Edition mode\", press  \nCTRL + ALT + B\n to show the login dialog. Note that we created a super admin user for you with login (=admin) and password (=admin).", 
            "title": "Installation"
        }, 
        {
            "location": "/developper-documentation/installation/#developper-documentation", 
            "text": "", 
            "title": "Developper documentation"
        }, 
        {
            "location": "/developper-documentation/installation/#installation", 
            "text": "Installation of BackBee in developper mode assume assume you have basic knowledge of PHP5, Apache or Nginx and MySQL.  Third party Software  First of all, you need to check that your computer has a friendly working environment for web development. At a minimum, you need a web server (Apache, for instance), a database engine (MySQL, PostgreSQL, SQLite, or any PDO-compatible database engine), and  PHP 5.4  or later.  At least, you need to install  git  and  Composer , the dependency manager for PHP.  Follow this link to install it if your are on  Linux/Unix based OS  (like ubuntu or Mac OS X), Composer is also available on  Windows system .  In a command line interface, check if  composer  is correctly installed:   Also, check your PHP version which should be 5.4 or greater.   Eventually, you need to set up a domain name in your operating system.\nOn Unix/Linux based OS, you can add it into  /etc/hosts  file, we will choose  blogbee.dev :  127.0.0.1   blogbee.dev  Ok ! We can now launch the installation process.  Web Installer  Open a command line interface and get BackBee:  $ composer create-project \"backbee/backbee-standard\" /path/to/your/folder \"1.0\" -n  Then on the  public  directory, launch the builtin server of PHP:  $ cd /path/to/your/folder/public   php -S blogbee.dev:8000  And you should see the first installation step of BackBee (access  http://localhost:8000/install.php ) in a web browser:   You need to create  cache  and  log  folders with the correct rights, then you can refresh the page and access to the  second step  of the installer.   If required, check the  repository/Config  folder rights and then proceed with the  third  step.  You need to set your database settings. If you use a different database engine than MySQL or MariaDB, set the correct driver else you have nothing to change, only fill the fields  database name ,  username  and  password .   You also need to define your super admin user, fill the credentials then save and continue to the  fourth  step.   BackBee Installer creates and populates the database, fill the last information to complete the installation process: the  site_name  and the  domain .   You are done: BackBee gives you the  Apache  or  Nginx  configuration you have to set to be able to use BackBee on the chosen domain.    When you have set your web server, access the site by going to  http://blogbee.dev .  If everything is correctly installed, you should see the BackBee welcome message:    If you can't see BackBee welcome message, check both  cache  and  log  folders have the correct rights.   You can even connect to the \"Edition mode\", press   CTRL + ALT + B  to show the login dialog. Note that we created a super admin user for you with login (=admin) and password (=admin).", 
            "title": "Installation"
        }, 
        {
            "location": "/developper-documentation/architecture/", 
            "text": "Developper documentation\n\n\nArchitecture\n\n\nBackBee CMS relies on many Symfony components and on Doctrine 2.\n\n\nThere is the list of components currently used by BackBee CMS:\n\n\n\n\nConfig   \n\n\nConsole   \n\n\nDebug   \n\n\nDependencyInjection   \n\n\nEventDispatcher\n\n\nExpression Language\n\n\nFilesystem\n\n\nHttpFoundation\n\n\nHttpKernel\n\n\nRouting\n\n\nSecurity ACL\n\n\nSecurity Core\n\n\nSecurity HTTP\n\n\nSerializer\n\n\nTranslation\n\n\nValidator\n\n\nYaml\n\n\n(Twig)\n\n\n\n\nBackBee CMS depends on a PHP application (the BackBee \"Core\") which provide a REST API to manage all the contents,\nthe users, the media and the security and to a REST Javascript client which provide to the final users a toolbar\nto ease the management of the contents.\n\n\nTo understand how BackBee CMS is built, take a look on this schema:", 
            "title": "Architecture"
        }, 
        {
            "location": "/developper-documentation/architecture/#developper-documentation", 
            "text": "", 
            "title": "Developper documentation"
        }, 
        {
            "location": "/developper-documentation/architecture/#architecture", 
            "text": "BackBee CMS relies on many Symfony components and on Doctrine 2.  There is the list of components currently used by BackBee CMS:   Config     Console     Debug     DependencyInjection     EventDispatcher  Expression Language  Filesystem  HttpFoundation  HttpKernel  Routing  Security ACL  Security Core  Security HTTP  Serializer  Translation  Validator  Yaml  (Twig)   BackBee CMS depends on a PHP application (the BackBee \"Core\") which provide a REST API to manage all the contents,\nthe users, the media and the security and to a REST Javascript client which provide to the final users a toolbar\nto ease the management of the contents.  To understand how BackBee CMS is built, take a look on this schema:", 
            "title": "Architecture"
        }, 
        {
            "location": "/developper-documentation/configuration/", 
            "text": "Developper documentation\n\n\nConfiguration\n\n\nBackBee CMS is powerful but highly configurable.\nIn this section, all the available configuration is broken down by the key (e.g. doctrine) that defines each possible section of your application configuration.\n\n\nBootstrap configuration (bootstrap.yml)\n\n\nThis configuration file have only two responsabilities:\n\n\n\n\ndebug\n: set the developper mode: if \ntrue\n, the container is generated at each request.\n\n\ncontainer\n: set the container configuration which have 2 parameters\n\n\ndump_directory\n: set the location of the generated container.\n\n\nautogenerate\n: if true, the container is generated at each request.\n\n\n\n\n\n\n\n\nThe \nautogenerate\n option is useful when you want to force the generation of the container in \"production\": don't forget this option have a performance cost.\n\n\nBundles configuration (bundles.yml)\n\n\nTo activate a bundle, you need to register it in this file:\n\n\n# /repository/Config/bundles.yml\ndemo: BackBee\\Bundle\\DemoBundle\\Demo\ntoolbar: BackBee\\Bundle\\ToolbarBundle\\Toolbar\n\n\n\n\n\nDatabase configuration (doctrine.yml)\n\n\nWe provide a demo sample configuration, you can see all available parameters into the related \nDoctrine configuration of Symfony\n:\n\n\n# /repository/Config/doctrine.yml\ndbal:\n    driver: pdo_mysql # [mysql|pgsql|sqlite]\n    host: localhost\n    port: 3306\n    dbname: backbee\n    user: root\n    password: password\n    charset: utf8\n    collation: utf8_general_ci\n    defaultTableOptions: { collate: utf8_general_ci, engine: InnoDB, charset: utf8 }\norm:\n    auto_mapping: true\n    metadata_cache_driver: apc\n    query_cache_driver:\n        type: service\n        id: my_doctrine_common_cache_service # must be a service or a FQCN\n    result_cache_driver:\n        type: memcache\n        host: localhost\n        port: 11211\n        instance_class: Memcache\n\n\n\n\n\nSEO Configuration (metadata.yml)\n\n\nThis is where you set the HTML meta headers you want to configure for each page of BackBee:\n\n\n# /repository/Config/metadata.yml\nkeywords:\n    name: 'keywords'\n    content:\n        default: 'cms, content manager'\ndescription:\n    name: 'description'\n    content:\n        default: \nbackbee demo website\n\n    lang: 'en'\nrobots:\n    name: 'robots'\n    content:\n        default: ''\n        select: ['', 'noindex', 'nofollow', 'noindex, nofollow']\n\n\n\n\n\nThis configuration have a real impact in the toolbar, see the generated SEO form in Page context mode:\n\n\n\n\nSecurity Configuration (security.yml)\n\n\nYou can configure firewalls and suoders inside this file, a sudoer is a super administrator:\n\n\n# /repository/Config/security.yml\nfirewalls:\n    firewall_name: { pattern: ^/, anonymous: null }\nsudoers:\n    username: userId", 
            "title": "Configuration"
        }, 
        {
            "location": "/developper-documentation/configuration/#developper-documentation", 
            "text": "", 
            "title": "Developper documentation"
        }, 
        {
            "location": "/developper-documentation/configuration/#configuration", 
            "text": "BackBee CMS is powerful but highly configurable.\nIn this section, all the available configuration is broken down by the key (e.g. doctrine) that defines each possible section of your application configuration.  Bootstrap configuration (bootstrap.yml)  This configuration file have only two responsabilities:   debug : set the developper mode: if  true , the container is generated at each request.  container : set the container configuration which have 2 parameters  dump_directory : set the location of the generated container.  autogenerate : if true, the container is generated at each request.     The  autogenerate  option is useful when you want to force the generation of the container in \"production\": don't forget this option have a performance cost.  Bundles configuration (bundles.yml)  To activate a bundle, you need to register it in this file:  # /repository/Config/bundles.yml\ndemo: BackBee\\Bundle\\DemoBundle\\Demo\ntoolbar: BackBee\\Bundle\\ToolbarBundle\\Toolbar  Database configuration (doctrine.yml)  We provide a demo sample configuration, you can see all available parameters into the related  Doctrine configuration of Symfony :  # /repository/Config/doctrine.yml\ndbal:\n    driver: pdo_mysql # [mysql|pgsql|sqlite]\n    host: localhost\n    port: 3306\n    dbname: backbee\n    user: root\n    password: password\n    charset: utf8\n    collation: utf8_general_ci\n    defaultTableOptions: { collate: utf8_general_ci, engine: InnoDB, charset: utf8 }\norm:\n    auto_mapping: true\n    metadata_cache_driver: apc\n    query_cache_driver:\n        type: service\n        id: my_doctrine_common_cache_service # must be a service or a FQCN\n    result_cache_driver:\n        type: memcache\n        host: localhost\n        port: 11211\n        instance_class: Memcache  SEO Configuration (metadata.yml)  This is where you set the HTML meta headers you want to configure for each page of BackBee:  # /repository/Config/metadata.yml\nkeywords:\n    name: 'keywords'\n    content:\n        default: 'cms, content manager'\ndescription:\n    name: 'description'\n    content:\n        default:  backbee demo website \n    lang: 'en'\nrobots:\n    name: 'robots'\n    content:\n        default: ''\n        select: ['', 'noindex', 'nofollow', 'noindex, nofollow']  This configuration have a real impact in the toolbar, see the generated SEO form in Page context mode:   Security Configuration (security.yml)  You can configure firewalls and suoders inside this file, a sudoer is a super administrator:  # /repository/Config/security.yml\nfirewalls:\n    firewall_name: { pattern: ^/, anonymous: null }\nsudoers:\n    username: userId", 
            "title": "Configuration"
        }, 
        {
            "location": "/developper-documentation/cookbooks/create_new_commands/", 
            "text": "CookBooks\n\n\nCreate new commands\n\n\nThe Console page of the Components section covers how to create a console application.\nThis cookbook article covers the creation of a command using BackBee Standard Edition.\n\n\nAutomatically Registering Commands\n\n\nTo make the console commands available automatically with BackBee, create a\n\nCommand\n directory inside your bundle and create a PHP file suffixed with\n\nCommand.php\n for each command that you want to provide. For example, if you\nwant to extend the DemoBundle to welcome you from the command line, create\n\nWelcomeCommand.php\n and add the following to it:\n\n\n// bundle/WelcomeBundle/Command/WelcomeCommand.php\nnamespace WelcomeBundle\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\nuse BackBee\\Console\\AbstractCommand;\n\nclass WelcomeCommand extends AbstractCommand\n{\n    protected function configure()\n    {\n        $this\n            -\nsetName('demo:welcome')\n            -\nsetDescription('Welcome someone')\n            -\naddArgument(\n                'name',\n                InputArgument::OPTIONAL,\n                'Who do you want to welcome?'\n            )\n            -\naddOption(\n                'yell',\n                null,\n                InputOption::VALUE_NONE,\n                'If set, the message will yell in uppercase letters'\n            )\n            -\nsetHelp(\nEOF\nThe \ninfo\n%command.name%\n/info\n command can welcome someone.\nWith the option ``yell``, the message will be displayed in uppercase letters.\nEOF;\n            )\n        ;\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    { \n        $text = 'Welcome '.$input-\ngetArgument('name');\n\n        if ($input-\ngetOption('yell')) {\n            $text = strtoupper($text);\n        }\n\n        $output-\nwriteln($text);\n    }\n}\n\n\n\n\nThis command will now automatically be available to run:\n\n\n    $ ./backbee demo:welcome Charles", 
            "title": "Create new commands"
        }, 
        {
            "location": "/developper-documentation/cookbooks/create_new_commands/#cookbooks", 
            "text": "", 
            "title": "CookBooks"
        }, 
        {
            "location": "/developper-documentation/cookbooks/create_new_commands/#create-new-commands", 
            "text": "The Console page of the Components section covers how to create a console application.\nThis cookbook article covers the creation of a command using BackBee Standard Edition.  Automatically Registering Commands  To make the console commands available automatically with BackBee, create a Command  directory inside your bundle and create a PHP file suffixed with Command.php  for each command that you want to provide. For example, if you\nwant to extend the DemoBundle to welcome you from the command line, create WelcomeCommand.php  and add the following to it:  // bundle/WelcomeBundle/Command/WelcomeCommand.php\nnamespace WelcomeBundle\\Command;\n\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n\nuse BackBee\\Console\\AbstractCommand;\n\nclass WelcomeCommand extends AbstractCommand\n{\n    protected function configure()\n    {\n        $this\n            - setName('demo:welcome')\n            - setDescription('Welcome someone')\n            - addArgument(\n                'name',\n                InputArgument::OPTIONAL,\n                'Who do you want to welcome?'\n            )\n            - addOption(\n                'yell',\n                null,\n                InputOption::VALUE_NONE,\n                'If set, the message will yell in uppercase letters'\n            )\n            - setHelp( EOF\nThe  info %command.name% /info  command can welcome someone.\nWith the option ``yell``, the message will be displayed in uppercase letters.\nEOF;\n            )\n        ;\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output)\n    { \n        $text = 'Welcome '.$input- getArgument('name');\n\n        if ($input- getOption('yell')) {\n            $text = strtoupper($text);\n        }\n\n        $output- writeln($text);\n    }\n}  This command will now automatically be available to run:      $ ./backbee demo:welcome Charles", 
            "title": "Create new commands"
        }, 
        {
            "location": "/developper-documentation/cookbooks/customize_error_pages/", 
            "text": "CookBooks\n\n\nCustomize error pages\n\n\nIn BackBee, thanks to Symfony Debug component all errors are treated as exceptions: pages not found or access unauthorized,\neach error is triggered by throwing an exception in your code.\n\n\nAlso, if your are in \"Developper Mode\" BackBee will catch and display a \nbetter\n exception page with a lot of informations\nto help you discover the issue:\n\n\n\n\nIn production, your visitors will see the nice error page provided by BackBee:\n\n\n\n\nError pages for the production environment can be customized in two ways depending on your needs:\n\n\n\n\nIf you just want to design the contents and styles of the error pages, you can set your own error templates\n\n\nIf you need total control of exception handling to execute your own logic, create your own ExceptionListener on \nkernel.exception\n event.\n\n\n\n\nUse your own default templates\n\n\nWhen the error page loads, an internal ExceptionListener is used to render a Twig template to show the user.\n\n\nThis ExceptionListener uses the HTTP status code, the \ndebug\n parameter and the following logic to determine the template filename:\n\n\nBackBee provide core templates which are located into \nvendor/backbee/BackBee/Resources/layouts/error\n.\nIf the template for the status code doesn't exist, this is the default template which is used instead.\n\n\nIn BackBee Standard edition, theses templates are already overriden in the \nToolbarBundle\n, theses templates are located\ninto \nvendor/backbee/toolbar-bundle/Resources/layouts/error\n folder.\n\n\nIf you want to override theses templates, your application might look like this:\n\n\nrepository/\n    Resources/\n        layouts/\n            error/\n                404.phtml\n                500.twig\n                default.phtml\n\n\n\n\nIn case you need them, the ExceptionController passes some information to the error template via the error variable which act as the original PHP exception so you can access the HTTP status code and exception message.", 
            "title": "Customize error pages"
        }, 
        {
            "location": "/developper-documentation/cookbooks/customize_error_pages/#cookbooks", 
            "text": "", 
            "title": "CookBooks"
        }, 
        {
            "location": "/developper-documentation/cookbooks/customize_error_pages/#customize-error-pages", 
            "text": "In BackBee, thanks to Symfony Debug component all errors are treated as exceptions: pages not found or access unauthorized,\neach error is triggered by throwing an exception in your code.  Also, if your are in \"Developper Mode\" BackBee will catch and display a  better  exception page with a lot of informations\nto help you discover the issue:   In production, your visitors will see the nice error page provided by BackBee:   Error pages for the production environment can be customized in two ways depending on your needs:   If you just want to design the contents and styles of the error pages, you can set your own error templates  If you need total control of exception handling to execute your own logic, create your own ExceptionListener on  kernel.exception  event.   Use your own default templates  When the error page loads, an internal ExceptionListener is used to render a Twig template to show the user.  This ExceptionListener uses the HTTP status code, the  debug  parameter and the following logic to determine the template filename:  BackBee provide core templates which are located into  vendor/backbee/BackBee/Resources/layouts/error .\nIf the template for the status code doesn't exist, this is the default template which is used instead.  In BackBee Standard edition, theses templates are already overriden in the  ToolbarBundle , theses templates are located\ninto  vendor/backbee/toolbar-bundle/Resources/layouts/error  folder.  If you want to override theses templates, your application might look like this:  repository/\n    Resources/\n        layouts/\n            error/\n                404.phtml\n                500.twig\n                default.phtml  In case you need them, the ExceptionController passes some information to the error template via the error variable which act as the original PHP exception so you can access the HTTP status code and exception message.", 
            "title": "Customize error pages"
        }
    ]
}